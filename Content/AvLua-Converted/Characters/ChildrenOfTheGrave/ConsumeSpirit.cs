using log4net.Core;

namespace Spells
{
    public class ConsumeSpirit : SpellScript
    {
        public override SpellScriptMetadata MetaData { get; } = new()
        {
            CastingBreaksStealth = true,
            DoesntBreakShields = true,
            TriggersSpellCasts = true,
            IsDamagingSpell = true,
            NotSingleTargetSpell = true,
        };
        int[] effect0 = { 10,15,20,25,30 };
        
        public override void TargetExecute(AttackableUnit target, SpellMissile missileNetworkID,
            ref HitResult hitResult)
        {
            //fix in lua and CS 
            //this champ use "spirit" generated by passive for cast this spell 
            // i doesn't have all information so for moment for spirit generation (time and another ) i just put an 120.0f of manacost 
            int level = GetSlotSpellLevel(owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            float nextBuffVars_TremDamage = effect0[level - 1];
            AddBuff(attacker, target, new Buffs.ConsumeSpirit(nextBuffVars_TremDamage), 1, 1, 60.0f, BuffAddType.REPLACE_EXISTING, BuffType.COMBAT_ENCHANCER, 0, true, false, false);
        }
    }
}
namespace Buffs
{
    public class ConsumeSpirit : BuffScript
    {
        public override BuffScriptMetadataUnmutable MetaData { get; } = new()
        {
            AutoBuffActivateEffect = new[] { "", },
            BuffName = "ConsumeSpirit",
            BuffTextureName = "ConsumeSpirit.dds",
            
        };
        float tremDamage;
        Particle tremorsFx;
        float lastTimeExecuted;
        public ConsumeSpirit(float tremDamage = default)
        {
            this.tremDamage = tremDamage;
        }
        public override void OnActivate()
        {
            int[] effect1 = { 14, 18, 22, 26, 30 };
            //add apbonus here 

            //RequireVar(this.tremDamage);
            int level = GetSlotSpellLevel((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            IncFlatMagicDamageMod(owner, effect1[(level-1)]);
            SpellEffectCreate(out tremorsFx, out _, "ConsumeSpirit_cas.troy", default, TeamId.TEAM_UNKNOWN, 0, 0, TeamId.TEAM_UNKNOWN, default, owner, false, owner, default, default, target, default, default, false, false, false, false, false);
            foreach (AttackableUnit unit in GetUnitsInArea((ObjAIBase)owner, owner.Position3D, 200, SpellDataFlags.AffectEnemies | SpellDataFlags.AffectNeutral | SpellDataFlags.AffectBuildings | SpellDataFlags.AffectMinions | SpellDataFlags.AffectHeroes | SpellDataFlags.AffectTurrets, default, true))
            {
                ApplyDamage(attacker, unit, tremDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 0, false, false, attacker);
            }
        }
        public override void OnDeactivate(bool expired)
        {
            //remove apbonus here 
            int[] effect1 = { 14, 18, 22, 26, 30 };
            int level = GetSlotSpellLevel((ObjAIBase)owner, 2, SpellbookType.SPELLBOOK_CHAMPION, SpellSlotType.SpellSlots);
            IncFlatMagicDamageMod(owner, -(  effect1[(level - 1)] ) );
            SpellEffectRemove(tremorsFx);
        }
        public override void OnUpdateActions()
        {
            if (ExecutePeriodically(1, ref lastTimeExecuted, false))
            {
                foreach (AttackableUnit unit in GetUnitsInArea((ObjAIBase)owner, owner.Position3D, 400, SpellDataFlags.AffectEnemies | SpellDataFlags.AffectNeutral | SpellDataFlags.AffectBuildings | SpellDataFlags.AffectMinions | SpellDataFlags.AffectHeroes | SpellDataFlags.AffectTurrets, default, true))
                {
                    ApplyDamage(attacker, unit, tremDamage, DamageType.DAMAGE_TYPE_MAGICAL, DamageSource.DAMAGE_SOURCE_SPELLAOE, 1, 0.3f, 0, false, false, attacker);
                }
            }
        }
        public override void OnDeath(ObjAIBase attacker, ref bool becomeZombie)
        {
            SpellEffectRemove(tremorsFx);
        }
    }
}